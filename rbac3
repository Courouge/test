import requests
from requests.auth import HTTPBasicAuth
import json
import urllib.parse

api_key = "VOTRE_API_KEY"
api_secret = "VOTRE_API_SECRET"

def analyze_cluster_permissions():
    base_url = "https://api.confluent.cloud"
    auth = HTTPBasicAuth(api_key, api_secret)
    headers = {'Content-Type': 'application/json'}
    
    print("=== ANALYSE DES PERMISSIONS PAR CLUSTER ===\n")
    
    # 1. Récupérer tous les role bindings d'abord
    print("1. Récupération de tous les role bindings...")
    response = requests.get(f"{base_url}/iam/v2/role-bindings", auth=auth, headers=headers)
    
    all_bindings = []
    if response.status_code == 200:
        data = response.json()
        all_bindings = data.get('data', [])
        print(f"   Total: {len(all_bindings)} role bindings trouvés\n")
    else:
        print(f"   Erreur: {response.status_code}")
        return
    
    # 2. Récupérer tous les environnements
    print("2. Analyse par environnement et cluster...")
    response = requests.get(f"{base_url}/org/v2/environments", auth=auth, headers=headers)
    
    if response.status_code != 200:
        print(f"Erreur lors de la récupération des environnements: {response.status_code}")
        return
    
    environments = response.json().get('data', [])
    
    for env in environments:
        env_id = env.get('id')
        env_name = env.get('display_name', 'Sans nom')
        
        print(f"\n📁 ENVIRONNEMENT: {env_name} (ID: {env_id})")
        print("=" * 60)
        
        # Role bindings au niveau environnement
        env_bindings = [b for b in all_bindings if f"environment={env_id}" in b.get('crn_pattern', '')]
        if env_bindings:
            print(f"\n🔑 Role bindings au niveau environnement ({len(env_bindings)}):")
            for binding in env_bindings:
                principal = binding.get('principal', 'N/A')
                role = binding.get('role_name', 'N/A')
                crn = binding.get('crn_pattern', 'N/A')
                print(f"   • {principal} → {role}")
                print(f"     CRN: {crn}")
        
        # Clusters dans cet environnement
        cluster_response = requests.get(
            f"{base_url}/cmk/v2/clusters?environment={env_id}",
            auth=auth, headers=headers
        )
        
        if cluster_response.status_code == 200:
            cluster_data = cluster_response.json()
            clusters = cluster_data.get('data', []) if cluster_data else []
            
            if clusters:
                print(f"\n🖥️  CLUSTERS ({len(clusters)}):")
                
                for cluster in clusters:
                    cluster_id = cluster.get('id', 'N/A')
                    cluster_name = cluster.get('display_name', 'Sans nom')
                    cluster_type = cluster.get('type', 'N/A')
                    
                    print(f"\n   🔷 {cluster_name} (ID: {cluster_id}, Type: {cluster_type})")
                    
                    # Rechercher les role bindings pour ce cluster avec différentes méthodes
                    cluster_bindings = []
                    
                    # Méthode 1: Recherche par ID exact dans le CRN
                    for binding in all_bindings:
                        crn = binding.get('crn_pattern', '')
                        if cluster_id in crn and f"environment={env_id}" in crn:
                            cluster_bindings.append(binding)
                    
                    if cluster_bindings:
                        print(f"      🔑 Role bindings trouvés ({len(cluster_bindings)}):")
                        for binding in cluster_bindings:
                            principal = binding.get('principal', 'N/A')
                            role = binding.get('role_name', 'N/A')
                            print(f"         • {principal} → {role}")
                    else:
                        print("      🔓 Aucun role binding spécifique trouvé")
                    
                    # Méthode 2: Test avec API directe
                    test_patterns = [
                        f"*{cluster_id}*",
                        f"*environment={env_id}*cloud-cluster={cluster_id}*",
                        f"crn://confluent.cloud/organization=*/environment={env_id}/cloud-cluster={cluster_id}"
                    ]
                    
                    print("      🔍 Tests API directs:")
                    for pattern in test_patterns:
                        encoded_pattern = urllib.parse.quote(pattern, safe='')
                        test_url = f"{base_url}/iam/v2/role-bindings?crn_pattern={encoded_pattern}"
                        
                        test_response = requests.get(test_url, auth=auth, headers=headers)
                        if test_response.status_code == 200:
                            test_data = test_response.json()
                            test_results = test_data.get('data', [])
                            print(f"         Pattern '{pattern}': {len(test_results)} résultat(s)")
                            
                            if test_results and len(test_results) <= 3:  # Afficher si peu de résultats
                                for result in test_results:
                                    print(f"           → {result.get('principal')} : {result.get('role_name')}")
                        else:
                            print(f"         Pattern '{pattern}': Erreur {test_response.status_code}")
            else:
                print(f"\n   📭 Aucun cluster dans cet environnement")
        else:
            print(f"\n   ❌ Erreur lors de la récupération des clusters: {cluster_response.status_code}")
    
    # 3. Résumé des role bindings non attribués
    print(f"\n\n" + "="*80)
    print("RÉSUMÉ - ROLE BINDINGS NON ATTRIBUÉS À UN CLUSTER SPÉCIFIQUE")
    print("="*80)
    
    unassigned_bindings = []
    for binding in all_bindings:
        crn = binding.get('crn_pattern', '')
        # Si le CRN ne contient pas "cloud-cluster=", c'est probablement au niveau org/env
        if 'cloud-cluster=' not in crn:
            unassigned_bindings.append(binding)
    
    if unassigned_bindings:
        print(f"\n{len(unassigned_bindings)} role binding(s) au niveau organisation/environnement:")
        for binding in unassigned_bindings:
            principal = binding.get('principal', 'N/A')
            role = binding.get('role_name', 'N/A')
            crn = binding.get('crn_pattern', 'N/A')
            print(f"   • {principal} → {role}")
            print(f"     CRN: {crn}")
    else:
        print("\nTous les role bindings sont attribués à des clusters spécifiques.")

if __name__ == "__main__":
    analyze_cluster_permissions()
