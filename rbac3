import requests
from requests.auth import HTTPBasicAuth
import json

api_key = "VOTRE_API_KEY"
api_secret = "VOTRE_API_SECRET"

def list_everything():
    base_url = "https://api.confluent.cloud"
    auth = HTTPBasicAuth(api_key, api_secret)
    headers = {'Content-Type': 'application/json'}
    
    print("=== INVENTAIRE COMPLET CONFLUENT CLOUD ===\n")
    
    # 1. Service Accounts
    print("1. ü§ñ SERVICE ACCOUNTS")
    print("-" * 50)
    
    response = requests.get(f"{base_url}/iam/v2/service-accounts", auth=auth, headers=headers)
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        try:
            data = response.json()
            service_accounts = data.get('data', [])
            print(f"Nombre de Service Accounts: {len(service_accounts)}\n")
            
            if service_accounts:
                for sa in service_accounts:
                    sa_id = sa.get('id', 'N/A')
                    sa_name = sa.get('display_name', 'Sans nom')
                    sa_desc = sa.get('description', 'Pas de description')
                    print(f"üìã {sa_name}")
                    print(f"   ID: {sa_id}")
                    print(f"   Description: {sa_desc}")
                    print()
            else:
                print("Aucun Service Account trouv√©")
                
        except Exception as e:
            print(f"Erreur parsing: {e}")
            print(f"R√©ponse brute: {response.text[:500]}...")
    else:
        print(f"Erreur: {response.text[:300]}...")
    
    print("\n" + "="*60 + "\n")
    
    # 2. API Keys
    print("2. üîë API KEYS")
    print("-" * 50)
    
    response = requests.get(f"{base_url}/iam/v2/api-keys", auth=auth, headers=headers)
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        try:
            data = response.json()
            api_keys = data.get('data', [])
            print(f"Nombre d'API Keys: {len(api_keys)}\n")
            
            if api_keys:
                for key in api_keys:
                    key_id = key.get('id', 'N/A')
                    key_desc = key.get('description', 'Pas de description')
                    owner = key.get('owner', {})
                    owner_id = owner.get('id', 'N/A') if owner else 'N/A'
                    spec = key.get('spec', {})
                    resource = spec.get('resource', {}) if spec else {}
                    resource_id = resource.get('id', 'N/A') if resource else 'N/A'
                    
                    print(f"üîê API Key: {key_id}")
                    print(f"   Description: {key_desc}")
                    print(f"   Owner: {owner_id}")
                    print(f"   Resource: {resource_id}")
                    print()
            else:
                print("Aucune API Key trouv√©e")
                
        except Exception as e:
            print(f"Erreur parsing: {e}")
            print(f"R√©ponse brute: {response.text[:500]}...")
    else:
        print(f"Erreur: {response.text[:300]}...")
    
    print("\n" + "="*60 + "\n")
    
    # 3. Utilisateurs
    print("3. üë• UTILISATEURS")
    print("-" * 50)
    
    response = requests.get(f"{base_url}/iam/v2/users", auth=auth, headers=headers)
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        try:
            data = response.json()
            users = data.get('data', [])
            print(f"Nombre d'utilisateurs: {len(users)}\n")
            
            if users:
                for user in users:
                    user_id = user.get('id', 'N/A')
                    user_email = user.get('email', 'Pas d\'email')
                    user_name = user.get('full_name', 'Pas de nom')
                    
                    print(f"üë§ {user_name}")
                    print(f"   ID: {user_id}")
                    print(f"   Email: {user_email}")
                    print()
            else:
                print("Aucun utilisateur trouv√©")
                
        except Exception as e:
            print(f"Erreur parsing: {e}")
            print(f"R√©ponse brute: {response.text[:500]}...")
    else:
        print(f"Erreur: {response.text[:300]}...")
    
    print("\n" + "="*60 + "\n")
    
    # 4. Test simple des role bindings
    print("4. üîí TEST SIMPLE DES ROLE BINDINGS")
    print("-" * 50)
    
    response = requests.get(f"{base_url}/iam/v2/role-bindings", auth=auth, headers=headers)
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        try:
            data = response.json()
            print(f"Structure de la r√©ponse: {list(data.keys()) if data else 'Vide'}")
            
            if 'data' in data:
                bindings = data['data']
                print(f"Nombre de role bindings: {len(bindings)}")
                
                if bindings:
                    print("\nPremiers role bindings:")
                    for i, binding in enumerate(bindings[:3]):  # Afficher seulement les 3 premiers
                        print(f"\nüîó Binding #{i+1}:")
                        print(f"   Principal: {binding.get('principal', 'N/A')}")
                        print(f"   Role: {binding.get('role_name', 'N/A')}")
                        print(f"   CRN: {binding.get('crn_pattern', 'N/A')}")
                    
                    if len(bindings) > 3:
                        print(f"\n... et {len(bindings) - 3} autres")
                else:
                    print("Liste de role bindings vide")
            else:
                print("Pas de cl√© 'data' dans la r√©ponse")
                print(f"Contenu: {json.dumps(data, indent=2)[:500]}...")
                
        except Exception as e:
            print(f"Erreur parsing: {e}")
            print(f"R√©ponse brute: {response.text[:500]}...")
    else:
        print(f"Erreur: {response.text[:300]}...")
    
    print("\n" + "="*60 + "\n")
    
    # 5. Informations sur l'organisation
    print("5. üè¢ ORGANISATION")
    print("-" * 50)
    
    response = requests.get(f"{base_url}/org/v2/organizations", auth=auth, headers=headers)
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        try:
            data = response.json()
            orgs = data.get('data', [])
            print(f"Nombre d'organisations: {len(orgs)}\n")
            
            for org in orgs:
                org_id = org.get('id', 'N/A')
                org_name = org.get('display_name', 'Sans nom')
                print(f"üè¢ {org_name}")
                print(f"   ID: {org_id}")
                
        except Exception as e:
            print(f"Erreur parsing: {e}")
            print(f"R√©ponse brute: {response.text[:500]}...")
    else:
        print(f"Erreur: {response.text[:300]}...")

if __name__ == "__main__":
    list_everything()
