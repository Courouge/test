import requests
from requests.auth import HTTPBasicAuth
import json

api_key = "VOTRE_API_KEY"
api_secret = "VOTRE_API_SECRET"

def explore_all_resources():
    base_url = "https://api.confluent.cloud"
    auth = HTTPBasicAuth(api_key, api_secret)
    headers = {'Accept': 'application/json'}
    
    # Liste exhaustive des endpoints à tester
    endpoints = [
        # IAM v2
        ("/iam/v2/users", "Users"),
        ("/iam/v2/service-accounts", "Service Accounts"),
        ("/iam/v2/api-keys", "API Keys"),
        ("/iam/v2/role-bindings", "Role Bindings v2"),
        ("/iam/v2/roles", "Roles v2"),
        ("/iam/v2/identity-pools", "Identity Pools"),
        ("/iam/v2/identity-providers", "Identity Providers"),
        ("/iam/v2/invitations", "Invitations"),
        
        # IAM v1 (fallback)
        ("/iam/v1/role-bindings", "Role Bindings v1"),
        ("/iam/v1/roles", "Roles v1"),
        
        # RBAC (alternative)
        ("/rbac/v1/role-bindings", "RBAC Role Bindings"),
        ("/rbac/v1/principals", "RBAC Principals"),
        
        # Organisation
        ("/org/v2/organizations", "Organizations"),
        ("/org/v2/environments", "Environments"),
        
        # Clusters & Resources
        ("/cmk/v2/clusters", "Kafka Clusters"),
        ("/srcm/v2/clusters", "Schema Registry Clusters"),
        ("/connect/v1/environments", "Connect Environments"),
        ("/ksqldb/v2/clusters", "ksqlDB Clusters"),
        
        # Kafka Resources
        ("/kafka/v3/clusters", "Kafka v3 Clusters"),
        ("/kafka/v3/topics", "Kafka Topics"),
        ("/kafka/v3/consumer-groups", "Consumer Groups"),
        ("/kafka/v3/acls", "Kafka ACLs"),
        
        # Metrics & Monitoring
        ("/metrics/v2/export", "Metrics Export"),
        ("/metrics/v2/descriptors", "Metrics Descriptors"),
        
        # Billing & Usage
        ("/billing/v1/costs", "Billing Costs"),
        ("/billing/v1/payment-methods", "Payment Methods"),
        
        # Networking
        ("/networking/v1/networks", "Networks"),
        ("/networking/v1/peerings", "Peerings"),
        ("/networking/v1/private-link-accesses", "Private Link"),
        
        # Connectors
        ("/connect/v1/connectors", "Connectors"),
        ("/connect/v1/connector-plugins", "Connector Plugins"),
        
        # Schema Registry
        ("/subject-config", "SR Subject Config"),
        ("/subjects", "SR Subjects"),
        ("/schemas", "SR Schemas"),
        
        # Data Catalog
        ("/catalog/v1/entity", "Data Catalog Entities"),
        ("/catalog/v1/search", "Data Catalog Search"),
        
        # Stream Governance
        ("/sg/v1/clusters", "Stream Governance"),
        
        # Pipelines
        ("/sd/v1/pipelines", "Stream Designer Pipelines"),
        
        # Audit Logs
        ("/service/audit/v1/audit-logs", "Audit Logs"),
    ]
    
    print("=== EXPLORATION COMPLÈTE CONFLUENT CLOUD ===")
    print(f"Total endpoints à tester: {len(endpoints)}\n")
    
    results = {
        'success': [],
        'forbidden': [],
        'not_found': [],
        'error': []
    }
    
    for endpoint, name in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", auth=auth, headers=headers, timeout=10)
            
            status = response.status_code
            
            if status == 200:
                try:
                    data = response.json()
                    if isinstance(data, dict) and 'data' in data:
                        count = len(data['data'])
                        results['success'].append(f"✅ {name:<25} → {count:>3} items")
                    elif isinstance(data, list):
                        count = len(data)
                        results['success'].append(f"✅ {name:<25} → {count:>3} items")
                    else:
                        results['success'].append(f"✅ {name:<25} → OK (non-standard)")
                except:
                    results['success'].append(f"✅ {name:<25} → OK (non-JSON)")
                    
            elif status == 403:
                results['forbidden'].append(f"🔒 {name:<25} → Forbidden")
            elif status == 404:
                results['not_found'].append(f"❌ {name:<25} → Not Found")
            elif status == 400:
                results['error'].append(f"⚠️  {name:<25} → Bad Request")
            elif status == 401:
                results['error'].append(f"🔑 {name:<25} → Unauthorized")
            else:
                results['error'].append(f"❓ {name:<25} → HTTP {status}")
                
        except requests.exceptions.Timeout:
            results['error'].append(f"⏱️  {name:<25} → Timeout")
        except Exception as e:
            results['error'].append(f"💥 {name:<25} → {str(e)[:20]}...")
    
    # Affichage compact des résultats
    print("🟢 ENDPOINTS FONCTIONNELS:")
    print("-" * 45)
    for result in results['success']:
        print(result)
    
    if results['forbidden']:
        print(f"\n🔒 ACCÈS REFUSÉ ({len(results['forbidden'])}):")
        print("-" * 30)
        for result in results['forbidden']:
            print(result)
    
    if results['not_found']:
        print(f"\n❌ NON TROUVÉS ({len(results['not_found'])}):")
        print("-" * 25)
        for result in results['not_found']:
            print(result)
    
    if results['error']:
        print(f"\n⚠️  ERREURS ({len(results['error'])}):")
        print("-" * 20)
        for result in results['error']:
            print(result)
    
    # Statistiques
    total_success = len(results['success'])
    total_accessible = total_success + len(results['forbidden'])
    total_endpoints = len(endpoints)
    
    print(f"\n📊 RÉSUMÉ:")
    print(f"   Fonctionnels: {total_success}/{total_endpoints}")
    print(f"   Accessibles: {total_accessible}/{total_endpoints}")
    print(f"   Taux succès: {(total_success/total_endpoints)*100:.1f}%")
    
    # Si on a trouvé des ressources avec role bindings ou permissions
    print(f"\n🔍 ENDPOINTS LIÉS AUX PERMISSIONS:")
    permission_endpoints = [r for r in results['success'] if any(word in r.lower() for word in ['role', 'rbac', 'acl', 'permission', 'auth'])]
    if permission_endpoints:
        for endpoint in permission_endpoints:
            print(f"   {endpoint}")
    else:
        print("   Aucun endpoint de permissions trouvé")

def quick_test_working_endpoints():
    """Test rapide des endpoints qui fonctionnent"""
    base_url = "https://api.confluent.cloud"
    auth = HTTPBasicAuth(api_key, api_secret)
    headers = {'Accept': 'application/json'}
    
    # Endpoints les plus susceptibles de contenir des infos sur les permissions
    quick_endpoints = [
        "/iam/v2/users",
        "/iam/v2/service-accounts", 
        "/org/v2/environments",
        "/cmk/v2/clusters",
        "/kafka/v3/acls",
    ]
    
    print(f"\n{'='*60}")
    print("🚀 TEST RAPIDE DES RESSOURCES PRINCIPALES")
    print(f"{'='*60}")
    
    for endpoint in quick_endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", auth=auth, headers=headers, timeout=5)
            if response.status_code == 200:
                data = response.json()
                items = data.get('data', data if isinstance(data, list) else [])
                print(f"\n📋 {endpoint.split('/')[-1].upper()}:")
                
                if items and len(items) <= 5:  # Afficher le détail si peu d'items
                    for i, item in enumerate(items[:3], 1):
                        item_id = item.get('id', 'N/A')
                        item_name = item.get('display_name') or item.get('name') or item.get('email', 'Sans nom')
                        print(f"   {i}. {item_name} (ID: {item_id})")
                else:
                    print(f"   {len(items)} élément(s) trouvé(s)")
        except:
            pass

if __name__ == "__main__":
    explore_all_resources()
    quick_test_working_endpoints()
