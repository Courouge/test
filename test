#!/usr/bin/env python3
"""
Script de test pour vérifier la configuration Confluent Cloud
"""

import os
from dotenv import load_dotenv
import requests
from requests.auth import HTTPBasicAuth
import sys

def test_confluent_connection():
    """Test de connexion à Confluent Cloud"""
    print("🔍 Test de connexion Confluent Cloud...")
    
    api_key = os.getenv('CONFLUENT_API_KEY')
    api_secret = os.getenv('CONFLUENT_API_SECRET')
    
    if not api_key or not api_secret:
        print("❌ Variables CONFLUENT_API_KEY et CONFLUENT_API_SECRET manquantes")
        return False
    
    try:
        response = requests.get(
            "https://api.confluent.cloud/iam/v2/service-accounts",
            auth=HTTPBasicAuth(api_key, api_secret),
            headers={'Accept': 'application/json'}
        )
        
        if response.status_code == 200:
            print("✅ Connexion Confluent Cloud réussie")
            data = response.json()
            print(f"   Nombre de service accounts existants: {len(data.get('data', []))}")
            return True
        else:
            print(f"❌ Erreur Confluent Cloud: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Erreur de connexion Confluent Cloud: {e}")
        return False

def test_environment_variables():
    """Vérification des variables d'environnement"""
    print("🔍 Vérification des variables d'environnement...")
    
    required_vars = [
        'CONFLUENT_API_KEY',
        'CONFLUENT_API_SECRET'
    ]
    
    optional_vars = [
        'CONFLUENT_BASE_URL'
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
        else:
            # Masquer les valeurs sensibles
            if 'SECRET' in var or 'TOKEN' in var:
                display_value = f"{value[:4]}***{value[-4:]}" if len(value) > 8 else "***"
            else:
                display_value = value
            print(f"   ✅ {var}: {display_value}")
    
    # Variables optionnelles
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            print(f"   ℹ️  {var}: {value}")
        else:
            print(f"   ➖ {var}: non définie (valeur par défaut sera utilisée)")
    
    if missing_vars:
        print(f"\n❌ Variables obligatoires manquantes: {', '.join(missing_vars)}")
        return False
    else:
        print("✅ Toutes les variables obligatoires sont présentes")
        return True

def test_cluster_access():
    """Test d'accès aux clusters"""
    print("\n🔍 Test d'accès aux clusters...")
    
    api_key = os.getenv('CONFLUENT_API_KEY')
    api_secret = os.getenv('CONFLUENT_API_SECRET')
    
    try:
        response = requests.get(
            "https://api.confluent.cloud/cmk/v2/clusters",
            auth=HTTPBasicAuth(api_key, api_secret),
            headers={'Accept': 'application/json'}
        )
        
        if response.status_code == 200:
            data = response.json()
            clusters = data.get('data', [])
            print(f"✅ Accès aux clusters réussi")
            print(f"   Nombre de clusters disponibles: {len(clusters)}")
            
            if clusters:
                print("   Clusters disponibles:")
                for cluster in clusters[:3]:  # Afficher les 3 premiers seulement
                    print(f"     - {cluster.get('id', 'N/A')} ({cluster.get('display_name', 'N/A')})")
                if len(clusters) > 3:
                    print(f"     ... et {len(clusters) - 3} autres")
            
            return True
        else:
            print(f"❌ Erreur d'accès aux clusters: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"❌ Erreur lors du test d'accès aux clusters: {e}")
        return False

def main():
    """Point d'entrée principal"""
    print("🧪 Script de test de configuration Confluent Cloud\n")
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # Tests
    tests = [
        test_environment_variables,
        test_confluent_connection,
        test_cluster_access
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"❌ Erreur lors du test: {e}")
            results.append(False)
    
    # Résumé
    print("\n" + "="*50)
    print("📊 Résumé des tests:")
    
    if all(results):
        print("✅ Tous les tests sont passés avec succès!")
        print("🚀 Vous pouvez maintenant utiliser le script create_tenant.py")
        print("\n💡 Exemples d'utilisation:")
        print("   python create_tenant.py create --project my-project --cluster-id lkc-xxxxx")
        print("   python create_tenant.py list --project my-project")
        print("   python create_tenant.py delete --project my-project")
        sys.exit(0)
    else:
        print("❌ Certains tests ont échoué.")
        print("🔧 Veuillez corriger les erreurs avant d'utiliser le script principal.")
        sys.exit(1)

if __name__ == "__main__":
    main()STORAGE_PATH', './credentials')
    
    print(f"   Mode de stockage: {storage_type}")
    
    if storage_type == 'display':
        print("   ✅ Mode display: les credentials seront affichées à l'écran")
        return True
    elif storage_type == 'file':
        print(f"   Chemin de stockage: {storage_path}")
        return test_storage_permissions()
    elif storage_type == 'local':
        print("   ✅ Mode local: stockage en mémoire (session uniquement)")
        return True
    else:
        print(f"   ❌ Mode de stockage non supporté: {storage_type}")
        print("   Modes supportés: display, file, local")
        return False

def main():
    """Point d'entrée principal"""
    print("🧪 Script de test de configuration (sans Vault)\n")
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # Tests
    tests = [
        test_environment_variables,
        test_confluent_connection,
        test_credential_storage_config
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"❌ Erreur lors du test: {e}")
            results.append(False)
    
    # Résumé
    print("\n" + "="*50)
    print("📊 Résumé des tests:")
    
    if all(results):
        print("✅ Tous les tests sont passés avec succès!")
        print("🚀 Vous pouvez maintenant utiliser le script create_tenant.py")
        print("\n💡 Exemples d'utilisation:")
        print("   python create_tenant.py create --project my-project --cluster-id lkc-xxxxx")
        print("   python create_tenant.py create --project my-project --cluster-id lkc-xxxxx --storage-type file")
        sys.exit(0)
    else:
        print("❌ Certains tests ont échoué.")
        print("🔧 Veuillez corriger les erreurs avant d'utiliser le script principal.")
        sys.exit(1)

if __name__ == "__main__":
    main()
    print("\n🔍 Test de connexion Vault...")
    
    vault_url = os.getenv('VAULT_URL')
    vault_token = os.getenv('VAULT_TOKEN')
    
    if not vault_url or not vault_token:
        print("❌ Variables VAULT_URL et VAULT_TOKEN manquantes")
        return False
    
    try:
        client = hvac.Client(url=vault_url, token=vault_token)
        
        if client.is_authenticated():
            print("✅ Connexion Vault réussie")
            
            # Test d'écriture/lecture
            test_path = "confluent/test/connection"
            test_data = {"test": "connection_ok"}
            
            client.secrets.kv.v2.create_or_update_secret(
                path=test_path,
                secret=test_data
            )
            print("✅ Test d'écriture Vault réussi")
            
            result = client.secrets.kv.v2.read_secret_version(path=test_path)
            if result['data']['data']['test'] == 'connection_ok':
                print("✅ Test de lecture Vault réussi")
                
                # Nettoyage
                client.secrets.kv.v2.delete_metadata_and_all_versions(path=test_path)
                print("✅ Nettoyage test Vault réussi")
                return True
            else:
                print("❌ Erreur lors de la lecture des données de test")
                return False
        else:
            print("❌ Authentification Vault échouée")
            return False
            
    except Exception as e:
        print(f"❌ Erreur de connexion Vault: {e}")
        return False

def test_environment_variables():
    """Vérification des variables d'environnement"""
    print("\n🔍 Vérification des variables d'environnement...")
    
    required_vars = [
        'CONFLUENT_API_KEY',
        'CONFLUENT_API_SECRET',
        'VAULT_URL',
        'VAULT_TOKEN'
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
        else:
            # Masquer les valeurs sensibles
            if 'SECRET' in var or 'TOKEN' in var:
                display_value = f"{value[:4]}***{value[-4:]}" if len(value) > 8 else "***"
            else:
                display_value = value
            print(f"   ✅ {var}: {display_value}")
    
    if missing_vars:
        print(f"\n❌ Variables manquantes: {', '.join(missing_vars)}")
        return False
    else:
        print("\n✅ Toutes les variables d'environnement sont présentes")
        return True

def main():
    """Point d'entrée principal"""
    print("🧪 Script de test de configuration\n")
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # Tests
    tests = [
        test_environment_variables,
        test_confluent_connection,
        test_vault_connection
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"❌ Erreur lors du test: {e}")
            results.append(False)
    
    # Résumé
    print("\n" + "="*50)
    print("📊 Résumé des tests:")
    
    if all(results):
        print("✅ Tous les tests sont passés avec succès!")
        print("🚀 Vous pouvez maintenant utiliser le script create_tenant.py")
        sys.exit(0)
    else:
        print("❌ Certains tests ont échoué.")
        print("🔧 Veuillez corriger les erreurs avant d'utiliser le script principal.")
        sys.exit(1)

if __name__ == "__main__":
    main()
