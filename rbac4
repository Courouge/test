import requests
from requests.auth import HTTPBasicAuth
import json
import time
from typing import Dict, List, Optional, Union

class ConfluentRoleBindingManager:
    """
    Gestionnaire de Role Bindings pour Confluent Cloud
    Inspir√© du provider Terraform confluent_role_binding
    """
    
    def __init__(self, api_key: str, api_secret: str):
        self.base_url = "https://api.confluent.cloud"
        self.auth = HTTPBasicAuth(api_key, api_secret)
        self.headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}
    
    def create_role_binding(
        self, 
        principal: str, 
        role_name: str, 
        crn_pattern: str,
        disable_wait_for_ready: bool = False
    ) -> Dict:
        """
        Cr√©er un role binding
        
        Args:
            principal: Principal √† lier (ex: "User:u-111aaa" ou "User:sa-111aaa")
            role_name: Nom du r√¥le (ex: "CloudClusterAdmin", "EnvironmentAdmin")
            crn_pattern: Pattern CRN d√©finissant la port√©e
            disable_wait_for_ready: D√©sactiver l'attente de propagation
        
        Returns:
            Dict contenant les d√©tails du role binding cr√©√©
        """
        payload = {
            "principal": principal,
            "role_name": role_name,
            "crn_pattern": crn_pattern
        }
        
        print(f"üîÑ Cr√©ation du role binding...")
        print(f"   Principal: {principal}")
        print(f"   Role: {role_name}")
        print(f"   CRN: {crn_pattern}")
        
        try:
            response = requests.post(
                f"{self.base_url}/iam/v2/role-bindings",
                json=payload,
                auth=self.auth,
                headers=self.headers
            )
            
            if response.status_code == 201:
                role_binding = response.json()
                binding_id = role_binding.get('id')
                print(f"‚úÖ Role binding cr√©√© avec succ√®s: {binding_id}")
                
                # Attendre la propagation si demand√© (comportement Terraform par d√©faut)
                if not disable_wait_for_ready:
                    print(f"‚è≥ Attente de la propagation (90s)...")
                    self._wait_for_ready(binding_id, timeout=90)
                
                return role_binding
            else:
                error_msg = f"Erreur lors de la cr√©ation: {response.status_code} - {response.text}"
                print(f"‚ùå {error_msg}")
                raise Exception(error_msg)
                
        except Exception as e:
            print(f"üí• Erreur: {e}")
            raise
    
    def get_role_binding(self, binding_id: str) -> Optional[Dict]:
        """R√©cup√©rer un role binding par ID"""
        try:
            response = requests.get(
                f"{self.base_url}/iam/v2/role-bindings/{binding_id}",
                auth=self.auth,
                headers=self.headers
            )
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 404:
                return None
            else:
                raise Exception(f"Erreur API: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"Erreur lors de la r√©cup√©ration: {e}")
            return None
    
    def list_role_bindings(
        self, 
        principal: Optional[str] = None,
        role_name: Optional[str] = None,
        crn_pattern: Optional[str] = None
    ) -> List[Dict]:
        """
        Lister les role bindings avec filtres optionnels
        (√âquivalent du data source terraform)
        """
        params = {}
        if principal:
            params['principal'] = principal
        if role_name:
            params['role_name'] = role_name  
        if crn_pattern:
            params['crn_pattern'] = crn_pattern
        
        try:
            response = requests.get(
                f"{self.base_url}/iam/v2/role-bindings",
                params=params,
                auth=self.auth,
                headers=self.headers
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get('data', [])
            else:
                print(f"Erreur lors de la liste: {response.status_code} - {response.text}")
                return []
                
        except Exception as e:
            print(f"Erreur: {e}")
            return []
    
    def delete_role_binding(self, binding_id: str) -> bool:
        """Supprimer un role binding"""
        try:
            response = requests.delete(
                f"{self.base_url}/iam/v2/role-bindings/{binding_id}",
                auth=self.auth,
                headers=self.headers
            )
            
            if response.status_code == 204:
                print(f"‚úÖ Role binding {binding_id} supprim√© avec succ√®s")
                return True
            else:
                print(f"‚ùå Erreur lors de la suppression: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"Erreur: {e}")
            return False
    
    def _wait_for_ready(self, binding_id: str, timeout: int = 90):
        """Attendre que le role binding soit propag√© (comme Terraform)"""
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            binding = self.get_role_binding(binding_id)
            if binding:
                # En th√©orie, on pourrait v√©rifier un statut, mais l'API ne l'expose pas
                # Terraform fait juste une attente fixe de 90s
                time.sleep(5)
                break
            time.sleep(2)
        
        elapsed = time.time() - start_time
        print(f"‚úÖ Propagation termin√©e apr√®s {elapsed:.1f}s")

class ConfluentResourceHelper:
    """Helper pour construire les CRN patterns comme dans Terraform"""
    
    @staticmethod
    def organization_crn(org_id: str) -> str:
        """CRN pour l'organisation enti√®re"""
        return f"crn://confluent.cloud/organization={org_id}"
    
    @staticmethod
    def environment_crn(org_id: str, env_id: str) -> str:
        """CRN pour un environnement sp√©cifique"""
        return f"crn://confluent.cloud/organization={org_id}/environment={env_id}"
    
    @staticmethod
    def kafka_cluster_crn(org_id: str, env_id: str, cluster_id: str) -> str:
        """CRN pour un cluster Kafka sp√©cifique"""
        return f"crn://confluent.cloud/organization={org_id}/environment={env_id}/cloud-cluster={cluster_id}"
    
    @staticmethod
    def kafka_topic_crn(org_id: str, env_id: str, cluster_id: str, topic_name: str = "*") -> str:
        """CRN pour un/des topic(s) Kafka"""
        return f"crn://confluent.cloud/organization={org_id}/environment={env_id}/cloud-cluster={cluster_id}/kafka={cluster_id}/topic={topic_name}"

# Exemples d'utilisation (inspir√©s des exemples Terraform)
def example_usage():
    """Exemples d'utilisation inspir√©s des configurations Terraform"""
    
    # Initialisation
    manager = ConfluentRoleBindingManager(
        api_key="VOTRE_API_KEY",
        api_secret="VOTRE_API_SECRET"
    )
    
    # IDs de vos ressources (√† adapter selon votre environnement)
    org_id = "1111aaaa-11aa-11aa-11aa-111111aaaaaa"
    env_id = "env-aaa1111"
    cluster_id = "lkc-1111aaa"
    service_account_id = "sa-111aaa"
    user_id = "u-111aaa"
    
    helper = ConfluentResourceHelper()
    
    print("=== EXEMPLES DE ROLE BINDINGS (STYLE TERRAFORM) ===\n")
    
    # Exemple 1: Role binding au niveau organisation (MetricsViewer)
    print("1. üìä Role binding Organisation - MetricsViewer")
    try:
        org_binding = manager.create_role_binding(
            principal=f"User:{service_account_id}",
            role_name="MetricsViewer",
            crn_pattern=helper.organization_crn(org_id)
        )
        print(f"   ID cr√©√©: {org_binding.get('id')}")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    print("\n" + "-"*50 + "\n")
    
    # Exemple 2: Role binding au niveau environnement (EnvironmentAdmin)
    print("2. üåç Role binding Environnement - EnvironmentAdmin")
    try:
        env_binding = manager.create_role_binding(
            principal=f"User:{service_account_id}",
            role_name="EnvironmentAdmin", 
            crn_pattern=helper.environment_crn(org_id, env_id),
            disable_wait_for_ready=True  # Exemple avec skip sync
        )
        print(f"   ID cr√©√©: {env_binding.get('id')}")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    print("\n" + "-"*50 + "\n")
    
    # Exemple 3: Role binding au niveau cluster (CloudClusterAdmin)
    print("3. ‚òÅÔ∏è  Role binding Cluster - CloudClusterAdmin")
    try:
        cluster_binding = manager.create_role_binding(
            principal=f"User:{user_id}",
            role_name="CloudClusterAdmin",
            crn_pattern=helper.kafka_cluster_crn(org_id, env_id, cluster_id)
        )
        print(f"   ID cr√©√©: {cluster_binding.get('id')}")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    print("\n" + "-"*50 + "\n")
    
    # Exemple 4: Lister les role bindings (√©quivalent data source)
    print("4. üìã Lister les role bindings existants")
    bindings = manager.list_role_bindings(principal=f"User:{user_id}")
    print(f"   Trouv√© {len(bindings)} role binding(s) pour {user_id}:")
    
    for binding in bindings:
        print(f"     ‚Ä¢ {binding.get('id')}: {binding.get('role_name')} sur {binding.get('crn_pattern')}")
    
    print("\n" + "="*60)
    print("‚úÖ Exemples termin√©s")

if __name__ == "__main__":
    example_usage()
