import requests
from requests.auth import HTTPBasicAuth
import json

def test_your_specific_case():
    """Test votre cas sp√©cifique en utilisant les patterns Terraform"""
    
    api_key = "VOTRE_API_KEY"
    api_secret = "VOTRE_API_SECRET"
    
    base_url = "https://api.confluent.cloud"
    auth = HTTPBasicAuth(api_key, api_secret)
    headers = {'Accept': 'application/json'}
    
    print("=== TEST DE VOTRE CAS SP√âCIFIQUE ===\n")
    
    # Vos param√®tres originaux
    original_params = {
        "principal": "User:u-111aaa",
        "role_name": "CloudClusterAdmin",
        "crn_pattern": "crn://confluent.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-aaa1111/cloud-cluster=lkc-1111aaa"
    }
    
    print("1. üß™ Test avec vos param√®tres originaux")
    print(f"   Param√®tres: {json.dumps(original_params, indent=4)}")
    
    # Test 1: GET direct (comme vous faisiez)
    response = requests.get(
        f"{base_url}/iam/v2/role-bindings",
        params=original_params,
        auth=auth,
        headers=headers
    )
    
    print(f"\n   Status GET: {response.status_code}")
    print(f"   URL: {response.url}")
    
    if response.status_code == 200:
        try:
            data = response.json()
            results = data.get('data', [])
            print(f"   ‚úÖ R√©sultats: {len(results)}")
            
            for result in results:
                print(f"      - {result.get('principal')} ‚Üí {result.get('role_name')}")
        except:
            print(f"   R√©ponse: {response.text[:200]}...")
    else:
        print(f"   ‚ùå Erreur: {response.text[:200]}...")
    
    print("\n" + "-"*60 + "\n")
    
    # Test 2: Patterns alternatifs inspir√©s de Terraform
    print("2. üîç Test avec patterns alternatifs (style Terraform)")
    
    alternative_patterns = [
        # Pattern plus simple (wildcard)
        "crn://confluent.cloud/organization=*/environment=env-aaa1111/cloud-cluster=lkc-1111aaa",
        
        # Pattern sans organisation sp√©cifique
        "crn://confluent.cloud/**/environment=env-aaa1111/cloud-cluster=lkc-1111aaa",
        
        # Pattern tr√®s simple
        "*env-aaa1111*cloud-cluster=lkc-1111aaa*",
        
        # Pattern minimal
        "*lkc-1111aaa*"
    ]
    
    for i, pattern in enumerate(alternative_patterns, 1):
        print(f"\n   Test {i}: {pattern}")
        
        test_params = {
            "principal": "User:u-111aaa",
            "role_name": "CloudClusterAdmin",
            "crn_pattern": pattern
        }
        
        response = requests.get(
            f"{base_url}/iam/v2/role-bindings",
            params=test_params,
            auth=auth,
            headers=headers
        )
        
        print(f"      Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                count = len(data.get('data', []))
                print(f"      ‚úÖ R√©sultats: {count}")
                
                if count > 0:
                    print(f"      üéØ SUCC√àS avec ce pattern!")
                    break
            except:
                print(f"      Erreur JSON")
        else:
            print(f"      ‚ùå {response.text[:100]}...")
    
    print("\n" + "-"*60 + "\n")
    
    # Test 3: Cr√©ation d'un role binding (style Terraform)
    print("3. üî® Test de cr√©ation d'un role binding")
    
    # D'abord, r√©cup√©rer les vrais IDs
    print("\n   üìã R√©cup√©ration des vrais IDs...")
    
    # Utilisateurs
    users_response = requests.get(f"{base_url}/iam/v2/users", auth=auth, headers=headers)
    real_user_id = None
    if users_response.status_code == 200:
        users = users_response.json().get('data', [])
        if users:
            real_user_id = users[0].get('id')
            print(f"      Vrai User ID: {real_user_id}")
    
    # Environnements
    env_response = requests.get(f"{base_url}/org/v2/environments", auth=auth, headers=headers)
    real_env_id = None
    if env_response.status_code == 200:
        envs = env_response.json().get('data', [])
        if envs:
            real_env_id = envs[0].get('id')
            print(f"      Vrai Env ID: {real_env_id}")
    
    # Clusters dans le premier environnement
    real_cluster_id = None
    if real_env_id:
        cluster_response = requests.get(
            f"{base_url}/cmk/v2/clusters?environment={real_env_id}",
            auth=auth, headers=headers
        )
        if cluster_response.status_code == 200:
            try:
                cluster_data = cluster_response.json()
                if cluster_data and 'data' in cluster_data:
                    clusters = cluster_data['data']
                    if clusters:
                        real_cluster_id = clusters[0].get('id')
                        print(f"      Vrai Cluster ID: {real_cluster_id}")
            except:
                pass
    
    # Test avec les vrais IDs si on les a trouv√©s
    if real_user_id and real_env_id and real_cluster_id:
        print(f"\n   üéØ Test avec les VRAIS IDs:")
        
        # Construction du CRN r√©el (on ne conna√Æt pas l'org ID exact)
        real_crn_patterns = [
            f"crn://confluent.cloud/organization=*/environment={real_env_id}/cloud-cluster={real_cluster_id}",
            f"*environment={real_env_id}*cloud-cluster={real_cluster_id}*"
        ]
        
        for pattern in real_crn_patterns:
            print(f"\n      Test pattern: {pattern}")
            
            test_params = {
                "principal": f"User:{real_user_id}",
                "role_name": "CloudClusterAdmin",
                "crn_pattern": pattern
            }
            
            response = requests.get(
                f"{base_url}/iam/v2/role-bindings",
                params=test_params,
                auth=auth,
                headers=headers
            )
            
            print(f"         Status: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    count = len(data.get('data', []))
                    print(f"         ‚úÖ R√©sultats: {count}")
                    
                    if count > 0:
                        print(f"         üèÜ TROUV√â avec les vrais IDs!")
                        for result in data.get('data', []):
                            print(f"            ‚Ä¢ {result.get('principal')} ‚Üí {result.get('role_name')}")
                            print(f"            ‚Ä¢ CRN: {result.get('crn_pattern')}")
                        break
                except:
                    pass
    else:
        print("      ‚ö†Ô∏è  Impossible de r√©cup√©rer les vrais IDs")
    
    print(f"\n{'='*60}")
    print("üìù RECOMMANDATIONS:")
    print("1. Utilisez les VRAIS IDs de votre compte (u-xxxxx, env-xxxxx, lkc-xxxxx)")
    print("2. Essayez des patterns CRN plus simples avec des wildcards (*)")
    print("3. V√©rifiez que votre API key a les permissions RBAC n√©cessaires")
    print("4. Utilisez la m√©thode POST pour cr√©er de nouveaux role bindings")

if __name__ == "__main__":
    test_your_specific_case()
